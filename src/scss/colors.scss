@use "sass:map";
@use "sass:color";

$qa-colors: (
  primary: #5a99e1,
  secondary: #e15ab2,
  background: #ECECEC,
  icon: #ffffff,
  icon-dark: #373636,
  font: #ffffff,
  font-dark: #373636,
  font-medium: #999999,
  border: #969696,
  disabled: #7f7f7f,
  bg-blue: #C9DBFF,
  bg-yellow: #FFF0C9,
  bg-green: #C1EACC,
  'white': #ffffff,
  'black': #000000,
);

@function qa-color($keys...) {
  $value: $qa-colors;

  @each $key in $keys {
    $value: map-get($value, $key);
  }

  @return $value;
}

@mixin qa-color-vars() {
  @each $name, $color in $qa-colors {
    --qa-color-#{$name}: #{$color};
  }
}

@mixin qa-color-vars-variants() {
  // Only want to generate light and dark variants of certain included colors
  $qa-colors-variants: map.remove(
    $qa-colors,
    disabled,
    border,
    font-dark,
    font-medium,
    font,
    icon-dark,
    icon,
    background,
    bg-blue,
    bg-yellow,
    bg-green,
  );
  @each $name, $color in $qa-colors-variants {
    @for $i from 1 through 5 {
      --qa-color-#{$name}--lighten-#{$i * 10}: #{color.adjust($color, $lightness: $i * 10%)};
      --qa-color-#{$name}--darken-#{$i * 10}: #{color.adjust($color, $lightness: $i * -10%)};
    }
  }
}
